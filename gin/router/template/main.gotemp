//This is an auto-generated file, please do not edit it manually
//这是自动生成的文件,请不要手动编辑

package reg

import (
    "github.com/gin-gonic/gin"
    "github.com/gin-gonic/gin/binding"
    "net/http"
    "reflect"
    "strings"
    "sync"
)

var (
    // Validator 绑定的参数检验工具
    Validator binding.StructValidator = &defaultValidator{}
    // BeforeValidator 返回false跳过验证
    BeforeValidator = func(*gin.Context, any) bool { return true }
    // BindByTag 自定义Tag与数据绑定的关系
    BindByTag = map[string]func(any, *gin.Context) error{
        "query": func(obj any, context *gin.Context) error {
            values := context.Request.URL.Query()
            if err := binding.MapFormWithTag(obj, values, "query"); err != nil {
                return err
            }
            return nil
        },
        "form": func(obj any, context *gin.Context) error {
            req := context.Request
            if req.Method == "POST" || req.Method == "PUT" {
                if context.ContentType() == binding.MIMEMultipartPOSTForm {
                    return binding.FormMultipart.Bind(req, obj)
                } else {
                    return binding.Form.Bind(req, obj)
                }
            }
            return nil
        },
        "json": func(obj any, context *gin.Context) error {
            if context.Request.Method == "POST" || context.Request.Method == "PUT" {
                return context.BindJSON(obj)
            }
            return nil
        },
        "header": func(obj any, context *gin.Context) error {
            return context.BindHeader(obj)
        },
        "path": func(obj any, context *gin.Context) error {
            params := context.Params
            values := make(map[string][]string, len(params))
            for _, param := range params {
                values[param.Key] = []string{param.Value}
            }
            if err := binding.MapFormWithTag(obj, values, "path"); err != nil {
                return err
            }
            return nil
        },
    }

    g              *gin.Engine
    groups         = make(map[string]*gin.RouterGroup)
    groupsHandlers = make(map[string][]gin.HandlerFunc)
    regFns         []func()
    lock           sync.Mutex
    allMethods     = []string{
        http.MethodGet, http.MethodPost, http.MethodPut, http.MethodPatch,
        http.MethodHead, http.MethodOptions, http.MethodDelete, http.MethodConnect,
        http.MethodTrace,
    }
)

func RegFn(f func()) {
    regFns = append(regFns, f)
}

// RegisterErrorHandle 简单的统一异常拦截,可自定义
func RegisterErrorHandle(ginEngine *gin.Engine) {
    ginEngine.Handlers = append([]gin.HandlerFunc{func(context *gin.Context) {
        context.Next()
        es := context.Errors
        if len(es) == 0 {
            return
        }
        e := es.Last()
        status := context.Writer.Status()
        if status == 200 {
            status = 500
        }
        context.JSON(status, gin.H{
            "msg":  e.Error(),
            "data": e,
        })
    }}, ginEngine.Handlers...)
}

// RegisterRouter 注册路由,当gin不是同一个实例时,Group中信息也会被更新
func RegisterRouter(Gin *gin.Engine) {
    lock.Lock()
    defer lock.Unlock()
    if g != Gin {
        g = Gin
        // 生成新的groups,允许重复绑定到多个gin实例
        groups = make(map[string]*gin.RouterGroup)
    }
    for _, f := range regFns {
        f()
    }
}

func DoRegisterGinRouter(group string, handler gin.HandlerFunc, relativePath string, methods ...string) {
    g := GetGroup(group)
    if len(methods) <= 0 {
        methods = allMethods
    }
    for _, m := range methods {
        g.Handle(m, relativePath, handler)
    }
}

// BindGin 绑定gin,当gin不是同一个实例时,Group中信息也会被更新
func BindGin(Gin *gin.Engine) {
    if g != Gin {
        g = Gin
        // 生成新的groups,允许重复绑定到多个gin实例
        groups = make(map[string]*gin.RouterGroup)
    }
}

// GetGroup 获取一个组,用于注册中间件
func GetGroup(group string) *gin.RouterGroup {
    routerGroup := groups[group]
    if routerGroup == nil {
        if g == nil {
            panic("未绑定gin,需要先使用RegisterRouter")
        }
        routerGroup = g.Group(group)
        routerGroup.Handlers = append(routerGroup.Handlers, groupsHandlers[group]...)
        groups[group] = routerGroup
    }
    return routerGroup
}

// AddGroupHandlers 统一维护中间件,防止加载顺序不一致导致的未注册成功
func AddGroupHandlers(group string, handlers ...gin.HandlerFunc) {
    groupsHandlers[group] = append(groupsHandlers[group], handlers...)
    if g, ok := groups[group]; ok {
        g.Handlers = append(g.Handlers, handlers...)
    }
}
func ToBindF(structPointer any, fn func(*gin.Context), funcName string) gin.HandlerFunc {
    return toBind(structPointer, funcName)
}
func toBind(structPointer any, funcName string) gin.HandlerFunc {
    t := reflect.TypeOf(structPointer)
    m, ok := t.MethodByName(funcName)
    if t.Kind() == reflect.Pointer {
        t = t.Elem()
        if !ok {
            m, _ = t.MethodByName(funcName)
        }
    }
    index := m.Index
    waitBindTag := findTags(nil, t)
    return func(context *gin.Context) {
        reflectObj := reflect.New(t)
        obj := reflectObj.Interface()
        bind := false
        for _, s := range waitBindTag {
            f := BindByTag[s]
            if f != nil {
                bind = true
                err := f(obj, context)
                if err != nil {
                    context.Status(400)
                    _ = context.Error(err)
                    return
                }
            }
        }
        if bind && BeforeValidator(context, obj) {
            err := validate(obj)
            if err != nil {
                context.Status(400)
                _ = context.Error(err)
                context.Abort()
                return
            }
        }
        reflectObj.Method(index).Call([]reflect.Value{reflect.ValueOf(context)})
    }
}

func findTags(waitBindTag []string, t reflect.Type) []string {
    waitBindTag = appendTagByType(t, waitBindTag)
    numField := t.NumField()
    for i := 0; i < numField; i++ {
        field := t.Field(i)
        t := field.Type
        if t.Kind() == reflect.Pointer {
            t = t.Elem()
        }
        name := t.Name()
        if field.Name == name {
            waitBindTag = findTags(waitBindTag, t)
        }
    }
    return waitBindTag
}
func contains(arr []string, test string) bool {
    for _, s := range arr {
        if s == test {
            return true
        }
    }
    return false
}
func appendTagByType(t reflect.Type, waitBindTag []string) []string {
    for i := 0; i < t.NumField(); i++ {
        tag := t.Field(i).Tag
        if tag == "" {
            continue
        }
        split := strings.Split(string(tag), " ")
        for _, s := range split {
            types := strings.SplitN(s, ":", 2)[0]
            if types != "" && !contains(waitBindTag, types) {
                waitBindTag = append(waitBindTag, types)
            }
        }
    }
    return waitBindTag
}

func ChangeValidateTag(name string) binding.StructValidator {
    if d, ok := Validator.(*defaultValidator); ok {
        d.ValidateStruct(struct{}{})
        d.validate.SetTagName(name)
    } else {
        panic("自定义Validator不支持修改TagName")
    }
    return Validator
}

func validate(obj any) error {
    if Validator == nil {
        return nil
    }
    return Validator.ValidateStruct(obj)
}

type defaultValidator struct {
    once     sync.Once
    validate *validator.Validate
}

func (v *defaultValidator) ValidateStruct(obj interface{}) error {
    if obj == nil {
        return nil
    }
    v.once.Do(func() {
        v.validate = validator.New()
    })
    value := reflect.ValueOf(obj)
    switch value.Kind() {
    case reflect.Ptr:
        return v.ValidateStruct(value.Elem().Interface())
    case reflect.Struct:
        return v.validate.Struct(obj)
    case reflect.Slice, reflect.Array:
        count := value.Len()
        validateRet := make(binding.SliceValidationError, 0)
        for i := 0; i < count; i++ {
            if err := v.ValidateStruct(value.Index(i).Interface()); err != nil {
                validateRet = append(validateRet, err)
            }
        }
        if len(validateRet) == 0 {
            return nil
        }
        return validateRet
    default:
        return nil
    }
}

func (v *defaultValidator) Engine() interface{} {
    v.lazyinit()
    return v.validate
}

func (v *defaultValidator) lazyinit() {
    v.once.Do(func() {
        v.validate = validator.New()
    })
}